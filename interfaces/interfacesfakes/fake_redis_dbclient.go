// Code generated by counterfeiter. DO NOT EDIT.
package interfacesfakes

import (
	"context"
	"sync"

	"github.com/ehsaniara/delay-box/interfaces"
	redis "github.com/redis/go-redis/v9"
)

type FakeRedisDBClient struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	EvalStub        func(context.Context, string, []string, ...interface{}) *redis.Cmd
	evalMutex       sync.RWMutex
	evalArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
		arg4 []interface{}
	}
	evalReturns struct {
		result1 *redis.Cmd
	}
	evalReturnsOnCall map[int]struct {
		result1 *redis.Cmd
	}
	OptionsStub        func() *redis.Options
	optionsMutex       sync.RWMutex
	optionsArgsForCall []struct {
	}
	optionsReturns struct {
		result1 *redis.Options
	}
	optionsReturnsOnCall map[int]struct {
		result1 *redis.Options
	}
	PingStub        func(context.Context) *redis.StatusCmd
	pingMutex       sync.RWMutex
	pingArgsForCall []struct {
		arg1 context.Context
	}
	pingReturns struct {
		result1 *redis.StatusCmd
	}
	pingReturnsOnCall map[int]struct {
		result1 *redis.StatusCmd
	}
	PublishStub        func(context.Context, string, interface{}) *redis.IntCmd
	publishMutex       sync.RWMutex
	publishArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}
	publishReturns struct {
		result1 *redis.IntCmd
	}
	publishReturnsOnCall map[int]struct {
		result1 *redis.IntCmd
	}
	SubscribeStub        func(context.Context, ...string) *redis.PubSub
	subscribeMutex       sync.RWMutex
	subscribeArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	subscribeReturns struct {
		result1 *redis.PubSub
	}
	subscribeReturnsOnCall map[int]struct {
		result1 *redis.PubSub
	}
	ZAddStub        func(context.Context, string, ...redis.Z) *redis.IntCmd
	zAddMutex       sync.RWMutex
	zAddArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []redis.Z
	}
	zAddReturns struct {
		result1 *redis.IntCmd
	}
	zAddReturnsOnCall map[int]struct {
		result1 *redis.IntCmd
	}
	ZCardStub        func(context.Context, string) *redis.IntCmd
	zCardMutex       sync.RWMutex
	zCardArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	zCardReturns struct {
		result1 *redis.IntCmd
	}
	zCardReturnsOnCall map[int]struct {
		result1 *redis.IntCmd
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRedisDBClient) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRedisDBClient) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeRedisDBClient) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeRedisDBClient) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRedisDBClient) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRedisDBClient) Eval(arg1 context.Context, arg2 string, arg3 []string, arg4 ...interface{}) *redis.Cmd {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.evalMutex.Lock()
	ret, specificReturn := fake.evalReturnsOnCall[len(fake.evalArgsForCall)]
	fake.evalArgsForCall = append(fake.evalArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
		arg4 []interface{}
	}{arg1, arg2, arg3Copy, arg4})
	stub := fake.EvalStub
	fakeReturns := fake.evalReturns
	fake.recordInvocation("Eval", []interface{}{arg1, arg2, arg3Copy, arg4})
	fake.evalMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRedisDBClient) EvalCallCount() int {
	fake.evalMutex.RLock()
	defer fake.evalMutex.RUnlock()
	return len(fake.evalArgsForCall)
}

func (fake *FakeRedisDBClient) EvalCalls(stub func(context.Context, string, []string, ...interface{}) *redis.Cmd) {
	fake.evalMutex.Lock()
	defer fake.evalMutex.Unlock()
	fake.EvalStub = stub
}

func (fake *FakeRedisDBClient) EvalArgsForCall(i int) (context.Context, string, []string, []interface{}) {
	fake.evalMutex.RLock()
	defer fake.evalMutex.RUnlock()
	argsForCall := fake.evalArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRedisDBClient) EvalReturns(result1 *redis.Cmd) {
	fake.evalMutex.Lock()
	defer fake.evalMutex.Unlock()
	fake.EvalStub = nil
	fake.evalReturns = struct {
		result1 *redis.Cmd
	}{result1}
}

func (fake *FakeRedisDBClient) EvalReturnsOnCall(i int, result1 *redis.Cmd) {
	fake.evalMutex.Lock()
	defer fake.evalMutex.Unlock()
	fake.EvalStub = nil
	if fake.evalReturnsOnCall == nil {
		fake.evalReturnsOnCall = make(map[int]struct {
			result1 *redis.Cmd
		})
	}
	fake.evalReturnsOnCall[i] = struct {
		result1 *redis.Cmd
	}{result1}
}

func (fake *FakeRedisDBClient) Options() *redis.Options {
	fake.optionsMutex.Lock()
	ret, specificReturn := fake.optionsReturnsOnCall[len(fake.optionsArgsForCall)]
	fake.optionsArgsForCall = append(fake.optionsArgsForCall, struct {
	}{})
	stub := fake.OptionsStub
	fakeReturns := fake.optionsReturns
	fake.recordInvocation("Options", []interface{}{})
	fake.optionsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRedisDBClient) OptionsCallCount() int {
	fake.optionsMutex.RLock()
	defer fake.optionsMutex.RUnlock()
	return len(fake.optionsArgsForCall)
}

func (fake *FakeRedisDBClient) OptionsCalls(stub func() *redis.Options) {
	fake.optionsMutex.Lock()
	defer fake.optionsMutex.Unlock()
	fake.OptionsStub = stub
}

func (fake *FakeRedisDBClient) OptionsReturns(result1 *redis.Options) {
	fake.optionsMutex.Lock()
	defer fake.optionsMutex.Unlock()
	fake.OptionsStub = nil
	fake.optionsReturns = struct {
		result1 *redis.Options
	}{result1}
}

func (fake *FakeRedisDBClient) OptionsReturnsOnCall(i int, result1 *redis.Options) {
	fake.optionsMutex.Lock()
	defer fake.optionsMutex.Unlock()
	fake.OptionsStub = nil
	if fake.optionsReturnsOnCall == nil {
		fake.optionsReturnsOnCall = make(map[int]struct {
			result1 *redis.Options
		})
	}
	fake.optionsReturnsOnCall[i] = struct {
		result1 *redis.Options
	}{result1}
}

func (fake *FakeRedisDBClient) Ping(arg1 context.Context) *redis.StatusCmd {
	fake.pingMutex.Lock()
	ret, specificReturn := fake.pingReturnsOnCall[len(fake.pingArgsForCall)]
	fake.pingArgsForCall = append(fake.pingArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.PingStub
	fakeReturns := fake.pingReturns
	fake.recordInvocation("Ping", []interface{}{arg1})
	fake.pingMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRedisDBClient) PingCallCount() int {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	return len(fake.pingArgsForCall)
}

func (fake *FakeRedisDBClient) PingCalls(stub func(context.Context) *redis.StatusCmd) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = stub
}

func (fake *FakeRedisDBClient) PingArgsForCall(i int) context.Context {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	argsForCall := fake.pingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRedisDBClient) PingReturns(result1 *redis.StatusCmd) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = nil
	fake.pingReturns = struct {
		result1 *redis.StatusCmd
	}{result1}
}

func (fake *FakeRedisDBClient) PingReturnsOnCall(i int, result1 *redis.StatusCmd) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = nil
	if fake.pingReturnsOnCall == nil {
		fake.pingReturnsOnCall = make(map[int]struct {
			result1 *redis.StatusCmd
		})
	}
	fake.pingReturnsOnCall[i] = struct {
		result1 *redis.StatusCmd
	}{result1}
}

func (fake *FakeRedisDBClient) Publish(arg1 context.Context, arg2 string, arg3 interface{}) *redis.IntCmd {
	fake.publishMutex.Lock()
	ret, specificReturn := fake.publishReturnsOnCall[len(fake.publishArgsForCall)]
	fake.publishArgsForCall = append(fake.publishArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}{arg1, arg2, arg3})
	stub := fake.PublishStub
	fakeReturns := fake.publishReturns
	fake.recordInvocation("Publish", []interface{}{arg1, arg2, arg3})
	fake.publishMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRedisDBClient) PublishCallCount() int {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return len(fake.publishArgsForCall)
}

func (fake *FakeRedisDBClient) PublishCalls(stub func(context.Context, string, interface{}) *redis.IntCmd) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = stub
}

func (fake *FakeRedisDBClient) PublishArgsForCall(i int) (context.Context, string, interface{}) {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	argsForCall := fake.publishArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRedisDBClient) PublishReturns(result1 *redis.IntCmd) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = nil
	fake.publishReturns = struct {
		result1 *redis.IntCmd
	}{result1}
}

func (fake *FakeRedisDBClient) PublishReturnsOnCall(i int, result1 *redis.IntCmd) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = nil
	if fake.publishReturnsOnCall == nil {
		fake.publishReturnsOnCall = make(map[int]struct {
			result1 *redis.IntCmd
		})
	}
	fake.publishReturnsOnCall[i] = struct {
		result1 *redis.IntCmd
	}{result1}
}

func (fake *FakeRedisDBClient) Subscribe(arg1 context.Context, arg2 ...string) *redis.PubSub {
	fake.subscribeMutex.Lock()
	ret, specificReturn := fake.subscribeReturnsOnCall[len(fake.subscribeArgsForCall)]
	fake.subscribeArgsForCall = append(fake.subscribeArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2})
	stub := fake.SubscribeStub
	fakeReturns := fake.subscribeReturns
	fake.recordInvocation("Subscribe", []interface{}{arg1, arg2})
	fake.subscribeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRedisDBClient) SubscribeCallCount() int {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	return len(fake.subscribeArgsForCall)
}

func (fake *FakeRedisDBClient) SubscribeCalls(stub func(context.Context, ...string) *redis.PubSub) {
	fake.subscribeMutex.Lock()
	defer fake.subscribeMutex.Unlock()
	fake.SubscribeStub = stub
}

func (fake *FakeRedisDBClient) SubscribeArgsForCall(i int) (context.Context, []string) {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	argsForCall := fake.subscribeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRedisDBClient) SubscribeReturns(result1 *redis.PubSub) {
	fake.subscribeMutex.Lock()
	defer fake.subscribeMutex.Unlock()
	fake.SubscribeStub = nil
	fake.subscribeReturns = struct {
		result1 *redis.PubSub
	}{result1}
}

func (fake *FakeRedisDBClient) SubscribeReturnsOnCall(i int, result1 *redis.PubSub) {
	fake.subscribeMutex.Lock()
	defer fake.subscribeMutex.Unlock()
	fake.SubscribeStub = nil
	if fake.subscribeReturnsOnCall == nil {
		fake.subscribeReturnsOnCall = make(map[int]struct {
			result1 *redis.PubSub
		})
	}
	fake.subscribeReturnsOnCall[i] = struct {
		result1 *redis.PubSub
	}{result1}
}

func (fake *FakeRedisDBClient) ZAdd(arg1 context.Context, arg2 string, arg3 ...redis.Z) *redis.IntCmd {
	fake.zAddMutex.Lock()
	ret, specificReturn := fake.zAddReturnsOnCall[len(fake.zAddArgsForCall)]
	fake.zAddArgsForCall = append(fake.zAddArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []redis.Z
	}{arg1, arg2, arg3})
	stub := fake.ZAddStub
	fakeReturns := fake.zAddReturns
	fake.recordInvocation("ZAdd", []interface{}{arg1, arg2, arg3})
	fake.zAddMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRedisDBClient) ZAddCallCount() int {
	fake.zAddMutex.RLock()
	defer fake.zAddMutex.RUnlock()
	return len(fake.zAddArgsForCall)
}

func (fake *FakeRedisDBClient) ZAddCalls(stub func(context.Context, string, ...redis.Z) *redis.IntCmd) {
	fake.zAddMutex.Lock()
	defer fake.zAddMutex.Unlock()
	fake.ZAddStub = stub
}

func (fake *FakeRedisDBClient) ZAddArgsForCall(i int) (context.Context, string, []redis.Z) {
	fake.zAddMutex.RLock()
	defer fake.zAddMutex.RUnlock()
	argsForCall := fake.zAddArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRedisDBClient) ZAddReturns(result1 *redis.IntCmd) {
	fake.zAddMutex.Lock()
	defer fake.zAddMutex.Unlock()
	fake.ZAddStub = nil
	fake.zAddReturns = struct {
		result1 *redis.IntCmd
	}{result1}
}

func (fake *FakeRedisDBClient) ZAddReturnsOnCall(i int, result1 *redis.IntCmd) {
	fake.zAddMutex.Lock()
	defer fake.zAddMutex.Unlock()
	fake.ZAddStub = nil
	if fake.zAddReturnsOnCall == nil {
		fake.zAddReturnsOnCall = make(map[int]struct {
			result1 *redis.IntCmd
		})
	}
	fake.zAddReturnsOnCall[i] = struct {
		result1 *redis.IntCmd
	}{result1}
}

func (fake *FakeRedisDBClient) ZCard(arg1 context.Context, arg2 string) *redis.IntCmd {
	fake.zCardMutex.Lock()
	ret, specificReturn := fake.zCardReturnsOnCall[len(fake.zCardArgsForCall)]
	fake.zCardArgsForCall = append(fake.zCardArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ZCardStub
	fakeReturns := fake.zCardReturns
	fake.recordInvocation("ZCard", []interface{}{arg1, arg2})
	fake.zCardMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRedisDBClient) ZCardCallCount() int {
	fake.zCardMutex.RLock()
	defer fake.zCardMutex.RUnlock()
	return len(fake.zCardArgsForCall)
}

func (fake *FakeRedisDBClient) ZCardCalls(stub func(context.Context, string) *redis.IntCmd) {
	fake.zCardMutex.Lock()
	defer fake.zCardMutex.Unlock()
	fake.ZCardStub = stub
}

func (fake *FakeRedisDBClient) ZCardArgsForCall(i int) (context.Context, string) {
	fake.zCardMutex.RLock()
	defer fake.zCardMutex.RUnlock()
	argsForCall := fake.zCardArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRedisDBClient) ZCardReturns(result1 *redis.IntCmd) {
	fake.zCardMutex.Lock()
	defer fake.zCardMutex.Unlock()
	fake.ZCardStub = nil
	fake.zCardReturns = struct {
		result1 *redis.IntCmd
	}{result1}
}

func (fake *FakeRedisDBClient) ZCardReturnsOnCall(i int, result1 *redis.IntCmd) {
	fake.zCardMutex.Lock()
	defer fake.zCardMutex.Unlock()
	fake.ZCardStub = nil
	if fake.zCardReturnsOnCall == nil {
		fake.zCardReturnsOnCall = make(map[int]struct {
			result1 *redis.IntCmd
		})
	}
	fake.zCardReturnsOnCall[i] = struct {
		result1 *redis.IntCmd
	}{result1}
}

func (fake *FakeRedisDBClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.evalMutex.RLock()
	defer fake.evalMutex.RUnlock()
	fake.optionsMutex.RLock()
	defer fake.optionsMutex.RUnlock()
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	fake.zAddMutex.RLock()
	defer fake.zAddMutex.RUnlock()
	fake.zCardMutex.RLock()
	defer fake.zCardMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRedisDBClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ interfaces.RedisDBClient = new(FakeRedisDBClient)
