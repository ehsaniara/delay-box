// Code generated by counterfeiter. DO NOT EDIT.
package storagefakes

import (
	"context"
	"sync"

	scheduler "github.com/ehsaniara/delay-box/proto"
	"github.com/ehsaniara/delay-box/storage"
	redis "github.com/redis/go-redis/v9"
)

type FakeTaskStorage struct {
	CountAllWaitingTasksStub        func(context.Context) (int64, error)
	countAllWaitingTasksMutex       sync.RWMutex
	countAllWaitingTasksArgsForCall []struct {
		arg1 context.Context
	}
	countAllWaitingTasksReturns struct {
		result1 int64
		result2 error
	}
	countAllWaitingTasksReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	FetchAndRemoveDueTasksStub        func(context.Context) []*scheduler.Task
	fetchAndRemoveDueTasksMutex       sync.RWMutex
	fetchAndRemoveDueTasksArgsForCall []struct {
		arg1 context.Context
	}
	fetchAndRemoveDueTasksReturns struct {
		result1 []*scheduler.Task
	}
	fetchAndRemoveDueTasksReturnsOnCall map[int]struct {
		result1 []*scheduler.Task
	}
	GetAllTasksStub        func(context.Context) []*scheduler.Task
	getAllTasksMutex       sync.RWMutex
	getAllTasksArgsForCall []struct {
		arg1 context.Context
	}
	getAllTasksReturns struct {
		result1 []*scheduler.Task
	}
	getAllTasksReturnsOnCall map[int]struct {
		result1 []*scheduler.Task
	}
	GetAllTasksPaginationStub        func(context.Context, int32, int32) []*scheduler.Task
	getAllTasksPaginationMutex       sync.RWMutex
	getAllTasksPaginationArgsForCall []struct {
		arg1 context.Context
		arg2 int32
		arg3 int32
	}
	getAllTasksPaginationReturns struct {
		result1 []*scheduler.Task
	}
	getAllTasksPaginationReturnsOnCall map[int]struct {
		result1 []*scheduler.Task
	}
	PublishStub        func(context.Context, string, interface{}) *redis.IntCmd
	publishMutex       sync.RWMutex
	publishArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}
	publishReturns struct {
		result1 *redis.IntCmd
	}
	publishReturnsOnCall map[int]struct {
		result1 *redis.IntCmd
	}
	SetNewTaskStub        func(context.Context, *scheduler.Task)
	setNewTaskMutex       sync.RWMutex
	setNewTaskArgsForCall []struct {
		arg1 context.Context
		arg2 *scheduler.Task
	}
	SubscribeStub        func(context.Context, ...string) *redis.PubSub
	subscribeMutex       sync.RWMutex
	subscribeArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	subscribeReturns struct {
		result1 *redis.PubSub
	}
	subscribeReturnsOnCall map[int]struct {
		result1 *redis.PubSub
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTaskStorage) CountAllWaitingTasks(arg1 context.Context) (int64, error) {
	fake.countAllWaitingTasksMutex.Lock()
	ret, specificReturn := fake.countAllWaitingTasksReturnsOnCall[len(fake.countAllWaitingTasksArgsForCall)]
	fake.countAllWaitingTasksArgsForCall = append(fake.countAllWaitingTasksArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.CountAllWaitingTasksStub
	fakeReturns := fake.countAllWaitingTasksReturns
	fake.recordInvocation("CountAllWaitingTasks", []interface{}{arg1})
	fake.countAllWaitingTasksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTaskStorage) CountAllWaitingTasksCallCount() int {
	fake.countAllWaitingTasksMutex.RLock()
	defer fake.countAllWaitingTasksMutex.RUnlock()
	return len(fake.countAllWaitingTasksArgsForCall)
}

func (fake *FakeTaskStorage) CountAllWaitingTasksCalls(stub func(context.Context) (int64, error)) {
	fake.countAllWaitingTasksMutex.Lock()
	defer fake.countAllWaitingTasksMutex.Unlock()
	fake.CountAllWaitingTasksStub = stub
}

func (fake *FakeTaskStorage) CountAllWaitingTasksArgsForCall(i int) context.Context {
	fake.countAllWaitingTasksMutex.RLock()
	defer fake.countAllWaitingTasksMutex.RUnlock()
	argsForCall := fake.countAllWaitingTasksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskStorage) CountAllWaitingTasksReturns(result1 int64, result2 error) {
	fake.countAllWaitingTasksMutex.Lock()
	defer fake.countAllWaitingTasksMutex.Unlock()
	fake.CountAllWaitingTasksStub = nil
	fake.countAllWaitingTasksReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskStorage) CountAllWaitingTasksReturnsOnCall(i int, result1 int64, result2 error) {
	fake.countAllWaitingTasksMutex.Lock()
	defer fake.countAllWaitingTasksMutex.Unlock()
	fake.CountAllWaitingTasksStub = nil
	if fake.countAllWaitingTasksReturnsOnCall == nil {
		fake.countAllWaitingTasksReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.countAllWaitingTasksReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskStorage) FetchAndRemoveDueTasks(arg1 context.Context) []*scheduler.Task {
	fake.fetchAndRemoveDueTasksMutex.Lock()
	ret, specificReturn := fake.fetchAndRemoveDueTasksReturnsOnCall[len(fake.fetchAndRemoveDueTasksArgsForCall)]
	fake.fetchAndRemoveDueTasksArgsForCall = append(fake.fetchAndRemoveDueTasksArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.FetchAndRemoveDueTasksStub
	fakeReturns := fake.fetchAndRemoveDueTasksReturns
	fake.recordInvocation("FetchAndRemoveDueTasks", []interface{}{arg1})
	fake.fetchAndRemoveDueTasksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskStorage) FetchAndRemoveDueTasksCallCount() int {
	fake.fetchAndRemoveDueTasksMutex.RLock()
	defer fake.fetchAndRemoveDueTasksMutex.RUnlock()
	return len(fake.fetchAndRemoveDueTasksArgsForCall)
}

func (fake *FakeTaskStorage) FetchAndRemoveDueTasksCalls(stub func(context.Context) []*scheduler.Task) {
	fake.fetchAndRemoveDueTasksMutex.Lock()
	defer fake.fetchAndRemoveDueTasksMutex.Unlock()
	fake.FetchAndRemoveDueTasksStub = stub
}

func (fake *FakeTaskStorage) FetchAndRemoveDueTasksArgsForCall(i int) context.Context {
	fake.fetchAndRemoveDueTasksMutex.RLock()
	defer fake.fetchAndRemoveDueTasksMutex.RUnlock()
	argsForCall := fake.fetchAndRemoveDueTasksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskStorage) FetchAndRemoveDueTasksReturns(result1 []*scheduler.Task) {
	fake.fetchAndRemoveDueTasksMutex.Lock()
	defer fake.fetchAndRemoveDueTasksMutex.Unlock()
	fake.FetchAndRemoveDueTasksStub = nil
	fake.fetchAndRemoveDueTasksReturns = struct {
		result1 []*scheduler.Task
	}{result1}
}

func (fake *FakeTaskStorage) FetchAndRemoveDueTasksReturnsOnCall(i int, result1 []*scheduler.Task) {
	fake.fetchAndRemoveDueTasksMutex.Lock()
	defer fake.fetchAndRemoveDueTasksMutex.Unlock()
	fake.FetchAndRemoveDueTasksStub = nil
	if fake.fetchAndRemoveDueTasksReturnsOnCall == nil {
		fake.fetchAndRemoveDueTasksReturnsOnCall = make(map[int]struct {
			result1 []*scheduler.Task
		})
	}
	fake.fetchAndRemoveDueTasksReturnsOnCall[i] = struct {
		result1 []*scheduler.Task
	}{result1}
}

func (fake *FakeTaskStorage) GetAllTasks(arg1 context.Context) []*scheduler.Task {
	fake.getAllTasksMutex.Lock()
	ret, specificReturn := fake.getAllTasksReturnsOnCall[len(fake.getAllTasksArgsForCall)]
	fake.getAllTasksArgsForCall = append(fake.getAllTasksArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetAllTasksStub
	fakeReturns := fake.getAllTasksReturns
	fake.recordInvocation("GetAllTasks", []interface{}{arg1})
	fake.getAllTasksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskStorage) GetAllTasksCallCount() int {
	fake.getAllTasksMutex.RLock()
	defer fake.getAllTasksMutex.RUnlock()
	return len(fake.getAllTasksArgsForCall)
}

func (fake *FakeTaskStorage) GetAllTasksCalls(stub func(context.Context) []*scheduler.Task) {
	fake.getAllTasksMutex.Lock()
	defer fake.getAllTasksMutex.Unlock()
	fake.GetAllTasksStub = stub
}

func (fake *FakeTaskStorage) GetAllTasksArgsForCall(i int) context.Context {
	fake.getAllTasksMutex.RLock()
	defer fake.getAllTasksMutex.RUnlock()
	argsForCall := fake.getAllTasksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskStorage) GetAllTasksReturns(result1 []*scheduler.Task) {
	fake.getAllTasksMutex.Lock()
	defer fake.getAllTasksMutex.Unlock()
	fake.GetAllTasksStub = nil
	fake.getAllTasksReturns = struct {
		result1 []*scheduler.Task
	}{result1}
}

func (fake *FakeTaskStorage) GetAllTasksReturnsOnCall(i int, result1 []*scheduler.Task) {
	fake.getAllTasksMutex.Lock()
	defer fake.getAllTasksMutex.Unlock()
	fake.GetAllTasksStub = nil
	if fake.getAllTasksReturnsOnCall == nil {
		fake.getAllTasksReturnsOnCall = make(map[int]struct {
			result1 []*scheduler.Task
		})
	}
	fake.getAllTasksReturnsOnCall[i] = struct {
		result1 []*scheduler.Task
	}{result1}
}

func (fake *FakeTaskStorage) GetAllTasksPagination(arg1 context.Context, arg2 int32, arg3 int32) []*scheduler.Task {
	fake.getAllTasksPaginationMutex.Lock()
	ret, specificReturn := fake.getAllTasksPaginationReturnsOnCall[len(fake.getAllTasksPaginationArgsForCall)]
	fake.getAllTasksPaginationArgsForCall = append(fake.getAllTasksPaginationArgsForCall, struct {
		arg1 context.Context
		arg2 int32
		arg3 int32
	}{arg1, arg2, arg3})
	stub := fake.GetAllTasksPaginationStub
	fakeReturns := fake.getAllTasksPaginationReturns
	fake.recordInvocation("GetAllTasksPagination", []interface{}{arg1, arg2, arg3})
	fake.getAllTasksPaginationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskStorage) GetAllTasksPaginationCallCount() int {
	fake.getAllTasksPaginationMutex.RLock()
	defer fake.getAllTasksPaginationMutex.RUnlock()
	return len(fake.getAllTasksPaginationArgsForCall)
}

func (fake *FakeTaskStorage) GetAllTasksPaginationCalls(stub func(context.Context, int32, int32) []*scheduler.Task) {
	fake.getAllTasksPaginationMutex.Lock()
	defer fake.getAllTasksPaginationMutex.Unlock()
	fake.GetAllTasksPaginationStub = stub
}

func (fake *FakeTaskStorage) GetAllTasksPaginationArgsForCall(i int) (context.Context, int32, int32) {
	fake.getAllTasksPaginationMutex.RLock()
	defer fake.getAllTasksPaginationMutex.RUnlock()
	argsForCall := fake.getAllTasksPaginationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeTaskStorage) GetAllTasksPaginationReturns(result1 []*scheduler.Task) {
	fake.getAllTasksPaginationMutex.Lock()
	defer fake.getAllTasksPaginationMutex.Unlock()
	fake.GetAllTasksPaginationStub = nil
	fake.getAllTasksPaginationReturns = struct {
		result1 []*scheduler.Task
	}{result1}
}

func (fake *FakeTaskStorage) GetAllTasksPaginationReturnsOnCall(i int, result1 []*scheduler.Task) {
	fake.getAllTasksPaginationMutex.Lock()
	defer fake.getAllTasksPaginationMutex.Unlock()
	fake.GetAllTasksPaginationStub = nil
	if fake.getAllTasksPaginationReturnsOnCall == nil {
		fake.getAllTasksPaginationReturnsOnCall = make(map[int]struct {
			result1 []*scheduler.Task
		})
	}
	fake.getAllTasksPaginationReturnsOnCall[i] = struct {
		result1 []*scheduler.Task
	}{result1}
}

func (fake *FakeTaskStorage) Publish(arg1 context.Context, arg2 string, arg3 interface{}) *redis.IntCmd {
	fake.publishMutex.Lock()
	ret, specificReturn := fake.publishReturnsOnCall[len(fake.publishArgsForCall)]
	fake.publishArgsForCall = append(fake.publishArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}{arg1, arg2, arg3})
	stub := fake.PublishStub
	fakeReturns := fake.publishReturns
	fake.recordInvocation("Publish", []interface{}{arg1, arg2, arg3})
	fake.publishMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskStorage) PublishCallCount() int {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return len(fake.publishArgsForCall)
}

func (fake *FakeTaskStorage) PublishCalls(stub func(context.Context, string, interface{}) *redis.IntCmd) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = stub
}

func (fake *FakeTaskStorage) PublishArgsForCall(i int) (context.Context, string, interface{}) {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	argsForCall := fake.publishArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeTaskStorage) PublishReturns(result1 *redis.IntCmd) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = nil
	fake.publishReturns = struct {
		result1 *redis.IntCmd
	}{result1}
}

func (fake *FakeTaskStorage) PublishReturnsOnCall(i int, result1 *redis.IntCmd) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = nil
	if fake.publishReturnsOnCall == nil {
		fake.publishReturnsOnCall = make(map[int]struct {
			result1 *redis.IntCmd
		})
	}
	fake.publishReturnsOnCall[i] = struct {
		result1 *redis.IntCmd
	}{result1}
}

func (fake *FakeTaskStorage) SetNewTask(arg1 context.Context, arg2 *scheduler.Task) {
	fake.setNewTaskMutex.Lock()
	fake.setNewTaskArgsForCall = append(fake.setNewTaskArgsForCall, struct {
		arg1 context.Context
		arg2 *scheduler.Task
	}{arg1, arg2})
	stub := fake.SetNewTaskStub
	fake.recordInvocation("SetNewTask", []interface{}{arg1, arg2})
	fake.setNewTaskMutex.Unlock()
	if stub != nil {
		fake.SetNewTaskStub(arg1, arg2)
	}
}

func (fake *FakeTaskStorage) SetNewTaskCallCount() int {
	fake.setNewTaskMutex.RLock()
	defer fake.setNewTaskMutex.RUnlock()
	return len(fake.setNewTaskArgsForCall)
}

func (fake *FakeTaskStorage) SetNewTaskCalls(stub func(context.Context, *scheduler.Task)) {
	fake.setNewTaskMutex.Lock()
	defer fake.setNewTaskMutex.Unlock()
	fake.SetNewTaskStub = stub
}

func (fake *FakeTaskStorage) SetNewTaskArgsForCall(i int) (context.Context, *scheduler.Task) {
	fake.setNewTaskMutex.RLock()
	defer fake.setNewTaskMutex.RUnlock()
	argsForCall := fake.setNewTaskArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTaskStorage) Subscribe(arg1 context.Context, arg2 ...string) *redis.PubSub {
	fake.subscribeMutex.Lock()
	ret, specificReturn := fake.subscribeReturnsOnCall[len(fake.subscribeArgsForCall)]
	fake.subscribeArgsForCall = append(fake.subscribeArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2})
	stub := fake.SubscribeStub
	fakeReturns := fake.subscribeReturns
	fake.recordInvocation("Subscribe", []interface{}{arg1, arg2})
	fake.subscribeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskStorage) SubscribeCallCount() int {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	return len(fake.subscribeArgsForCall)
}

func (fake *FakeTaskStorage) SubscribeCalls(stub func(context.Context, ...string) *redis.PubSub) {
	fake.subscribeMutex.Lock()
	defer fake.subscribeMutex.Unlock()
	fake.SubscribeStub = stub
}

func (fake *FakeTaskStorage) SubscribeArgsForCall(i int) (context.Context, []string) {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	argsForCall := fake.subscribeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTaskStorage) SubscribeReturns(result1 *redis.PubSub) {
	fake.subscribeMutex.Lock()
	defer fake.subscribeMutex.Unlock()
	fake.SubscribeStub = nil
	fake.subscribeReturns = struct {
		result1 *redis.PubSub
	}{result1}
}

func (fake *FakeTaskStorage) SubscribeReturnsOnCall(i int, result1 *redis.PubSub) {
	fake.subscribeMutex.Lock()
	defer fake.subscribeMutex.Unlock()
	fake.SubscribeStub = nil
	if fake.subscribeReturnsOnCall == nil {
		fake.subscribeReturnsOnCall = make(map[int]struct {
			result1 *redis.PubSub
		})
	}
	fake.subscribeReturnsOnCall[i] = struct {
		result1 *redis.PubSub
	}{result1}
}

func (fake *FakeTaskStorage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.countAllWaitingTasksMutex.RLock()
	defer fake.countAllWaitingTasksMutex.RUnlock()
	fake.fetchAndRemoveDueTasksMutex.RLock()
	defer fake.fetchAndRemoveDueTasksMutex.RUnlock()
	fake.getAllTasksMutex.RLock()
	defer fake.getAllTasksMutex.RUnlock()
	fake.getAllTasksPaginationMutex.RLock()
	defer fake.getAllTasksPaginationMutex.RUnlock()
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	fake.setNewTaskMutex.RLock()
	defer fake.setNewTaskMutex.RUnlock()
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTaskStorage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.TaskStorage = new(FakeTaskStorage)
