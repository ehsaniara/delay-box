// Code generated by counterfeiter. DO NOT EDIT.
package storagefakes

import (
	"context"
	"sync"

	scheduler "github.com/ehsaniara/scheduler/proto"
	"github.com/ehsaniara/scheduler/storage"
)

type FakeTaskStorage struct {
	CountAllWaitingTasksStub        func(context.Context) (int64, error)
	countAllWaitingTasksMutex       sync.RWMutex
	countAllWaitingTasksArgsForCall []struct {
		arg1 context.Context
	}
	countAllWaitingTasksReturns struct {
		result1 int64
		result2 error
	}
	countAllWaitingTasksReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	FetchAndRemoveDueTasksStub        func(context.Context) []*scheduler.Task
	fetchAndRemoveDueTasksMutex       sync.RWMutex
	fetchAndRemoveDueTasksArgsForCall []struct {
		arg1 context.Context
	}
	fetchAndRemoveDueTasksReturns struct {
		result1 []*scheduler.Task
	}
	fetchAndRemoveDueTasksReturnsOnCall map[int]struct {
		result1 []*scheduler.Task
	}
	GetAllTasksStub        func() []*scheduler.Task
	getAllTasksMutex       sync.RWMutex
	getAllTasksArgsForCall []struct {
	}
	getAllTasksReturns struct {
		result1 []*scheduler.Task
	}
	getAllTasksReturnsOnCall map[int]struct {
		result1 []*scheduler.Task
	}
	SetNewTaskStub        func(context.Context, *scheduler.Task)
	setNewTaskMutex       sync.RWMutex
	setNewTaskArgsForCall []struct {
		arg1 context.Context
		arg2 *scheduler.Task
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTaskStorage) CountAllWaitingTasks(arg1 context.Context) (int64, error) {
	fake.countAllWaitingTasksMutex.Lock()
	ret, specificReturn := fake.countAllWaitingTasksReturnsOnCall[len(fake.countAllWaitingTasksArgsForCall)]
	fake.countAllWaitingTasksArgsForCall = append(fake.countAllWaitingTasksArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.CountAllWaitingTasksStub
	fakeReturns := fake.countAllWaitingTasksReturns
	fake.recordInvocation("CountAllWaitingTasks", []interface{}{arg1})
	fake.countAllWaitingTasksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTaskStorage) CountAllWaitingTasksCallCount() int {
	fake.countAllWaitingTasksMutex.RLock()
	defer fake.countAllWaitingTasksMutex.RUnlock()
	return len(fake.countAllWaitingTasksArgsForCall)
}

func (fake *FakeTaskStorage) CountAllWaitingTasksCalls(stub func(context.Context) (int64, error)) {
	fake.countAllWaitingTasksMutex.Lock()
	defer fake.countAllWaitingTasksMutex.Unlock()
	fake.CountAllWaitingTasksStub = stub
}

func (fake *FakeTaskStorage) CountAllWaitingTasksArgsForCall(i int) context.Context {
	fake.countAllWaitingTasksMutex.RLock()
	defer fake.countAllWaitingTasksMutex.RUnlock()
	argsForCall := fake.countAllWaitingTasksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskStorage) CountAllWaitingTasksReturns(result1 int64, result2 error) {
	fake.countAllWaitingTasksMutex.Lock()
	defer fake.countAllWaitingTasksMutex.Unlock()
	fake.CountAllWaitingTasksStub = nil
	fake.countAllWaitingTasksReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskStorage) CountAllWaitingTasksReturnsOnCall(i int, result1 int64, result2 error) {
	fake.countAllWaitingTasksMutex.Lock()
	defer fake.countAllWaitingTasksMutex.Unlock()
	fake.CountAllWaitingTasksStub = nil
	if fake.countAllWaitingTasksReturnsOnCall == nil {
		fake.countAllWaitingTasksReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.countAllWaitingTasksReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskStorage) FetchAndRemoveDueTasks(arg1 context.Context) []*scheduler.Task {
	fake.fetchAndRemoveDueTasksMutex.Lock()
	ret, specificReturn := fake.fetchAndRemoveDueTasksReturnsOnCall[len(fake.fetchAndRemoveDueTasksArgsForCall)]
	fake.fetchAndRemoveDueTasksArgsForCall = append(fake.fetchAndRemoveDueTasksArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.FetchAndRemoveDueTasksStub
	fakeReturns := fake.fetchAndRemoveDueTasksReturns
	fake.recordInvocation("FetchAndRemoveDueTasks", []interface{}{arg1})
	fake.fetchAndRemoveDueTasksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskStorage) FetchAndRemoveDueTasksCallCount() int {
	fake.fetchAndRemoveDueTasksMutex.RLock()
	defer fake.fetchAndRemoveDueTasksMutex.RUnlock()
	return len(fake.fetchAndRemoveDueTasksArgsForCall)
}

func (fake *FakeTaskStorage) FetchAndRemoveDueTasksCalls(stub func(context.Context) []*scheduler.Task) {
	fake.fetchAndRemoveDueTasksMutex.Lock()
	defer fake.fetchAndRemoveDueTasksMutex.Unlock()
	fake.FetchAndRemoveDueTasksStub = stub
}

func (fake *FakeTaskStorage) FetchAndRemoveDueTasksArgsForCall(i int) context.Context {
	fake.fetchAndRemoveDueTasksMutex.RLock()
	defer fake.fetchAndRemoveDueTasksMutex.RUnlock()
	argsForCall := fake.fetchAndRemoveDueTasksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskStorage) FetchAndRemoveDueTasksReturns(result1 []*scheduler.Task) {
	fake.fetchAndRemoveDueTasksMutex.Lock()
	defer fake.fetchAndRemoveDueTasksMutex.Unlock()
	fake.FetchAndRemoveDueTasksStub = nil
	fake.fetchAndRemoveDueTasksReturns = struct {
		result1 []*scheduler.Task
	}{result1}
}

func (fake *FakeTaskStorage) FetchAndRemoveDueTasksReturnsOnCall(i int, result1 []*scheduler.Task) {
	fake.fetchAndRemoveDueTasksMutex.Lock()
	defer fake.fetchAndRemoveDueTasksMutex.Unlock()
	fake.FetchAndRemoveDueTasksStub = nil
	if fake.fetchAndRemoveDueTasksReturnsOnCall == nil {
		fake.fetchAndRemoveDueTasksReturnsOnCall = make(map[int]struct {
			result1 []*scheduler.Task
		})
	}
	fake.fetchAndRemoveDueTasksReturnsOnCall[i] = struct {
		result1 []*scheduler.Task
	}{result1}
}

func (fake *FakeTaskStorage) GetAllTasks() []*scheduler.Task {
	fake.getAllTasksMutex.Lock()
	ret, specificReturn := fake.getAllTasksReturnsOnCall[len(fake.getAllTasksArgsForCall)]
	fake.getAllTasksArgsForCall = append(fake.getAllTasksArgsForCall, struct {
	}{})
	stub := fake.GetAllTasksStub
	fakeReturns := fake.getAllTasksReturns
	fake.recordInvocation("GetAllTasks", []interface{}{})
	fake.getAllTasksMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskStorage) GetAllTasksCallCount() int {
	fake.getAllTasksMutex.RLock()
	defer fake.getAllTasksMutex.RUnlock()
	return len(fake.getAllTasksArgsForCall)
}

func (fake *FakeTaskStorage) GetAllTasksCalls(stub func() []*scheduler.Task) {
	fake.getAllTasksMutex.Lock()
	defer fake.getAllTasksMutex.Unlock()
	fake.GetAllTasksStub = stub
}

func (fake *FakeTaskStorage) GetAllTasksReturns(result1 []*scheduler.Task) {
	fake.getAllTasksMutex.Lock()
	defer fake.getAllTasksMutex.Unlock()
	fake.GetAllTasksStub = nil
	fake.getAllTasksReturns = struct {
		result1 []*scheduler.Task
	}{result1}
}

func (fake *FakeTaskStorage) GetAllTasksReturnsOnCall(i int, result1 []*scheduler.Task) {
	fake.getAllTasksMutex.Lock()
	defer fake.getAllTasksMutex.Unlock()
	fake.GetAllTasksStub = nil
	if fake.getAllTasksReturnsOnCall == nil {
		fake.getAllTasksReturnsOnCall = make(map[int]struct {
			result1 []*scheduler.Task
		})
	}
	fake.getAllTasksReturnsOnCall[i] = struct {
		result1 []*scheduler.Task
	}{result1}
}

func (fake *FakeTaskStorage) SetNewTask(arg1 context.Context, arg2 *scheduler.Task) {
	fake.setNewTaskMutex.Lock()
	fake.setNewTaskArgsForCall = append(fake.setNewTaskArgsForCall, struct {
		arg1 context.Context
		arg2 *scheduler.Task
	}{arg1, arg2})
	stub := fake.SetNewTaskStub
	fake.recordInvocation("SetNewTask", []interface{}{arg1, arg2})
	fake.setNewTaskMutex.Unlock()
	if stub != nil {
		fake.SetNewTaskStub(arg1, arg2)
	}
}

func (fake *FakeTaskStorage) SetNewTaskCallCount() int {
	fake.setNewTaskMutex.RLock()
	defer fake.setNewTaskMutex.RUnlock()
	return len(fake.setNewTaskArgsForCall)
}

func (fake *FakeTaskStorage) SetNewTaskCalls(stub func(context.Context, *scheduler.Task)) {
	fake.setNewTaskMutex.Lock()
	defer fake.setNewTaskMutex.Unlock()
	fake.SetNewTaskStub = stub
}

func (fake *FakeTaskStorage) SetNewTaskArgsForCall(i int) (context.Context, *scheduler.Task) {
	fake.setNewTaskMutex.RLock()
	defer fake.setNewTaskMutex.RUnlock()
	argsForCall := fake.setNewTaskArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTaskStorage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.countAllWaitingTasksMutex.RLock()
	defer fake.countAllWaitingTasksMutex.RUnlock()
	fake.fetchAndRemoveDueTasksMutex.RLock()
	defer fake.fetchAndRemoveDueTasksMutex.RUnlock()
	fake.getAllTasksMutex.RLock()
	defer fake.getAllTasksMutex.RUnlock()
	fake.setNewTaskMutex.RLock()
	defer fake.setNewTaskMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTaskStorage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.TaskStorage = new(FakeTaskStorage)
