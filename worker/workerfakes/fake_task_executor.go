// Code generated by counterfeiter. DO NOT EDIT.
package workerfakes

import (
	"context"
	"sync"

	"github.com/IBM/sarama"
	"github.com/ehsaniara/delay-box/worker"
)

type FakeTaskExecutor struct {
	ExecuteCommandConsumerKafkaStub        func(*sarama.ConsumerMessage)
	executeCommandConsumerKafkaMutex       sync.RWMutex
	executeCommandConsumerKafkaArgsForCall []struct {
		arg1 *sarama.ConsumerMessage
	}
	SetUpSubscriberStub        func(context.Context)
	setUpSubscriberMutex       sync.RWMutex
	setUpSubscriberArgsForCall []struct {
		arg1 context.Context
	}
	StopStub        func()
	stopMutex       sync.RWMutex
	stopArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTaskExecutor) ExecuteCommandConsumerKafka(arg1 *sarama.ConsumerMessage) {
	fake.executeCommandConsumerKafkaMutex.Lock()
	fake.executeCommandConsumerKafkaArgsForCall = append(fake.executeCommandConsumerKafkaArgsForCall, struct {
		arg1 *sarama.ConsumerMessage
	}{arg1})
	stub := fake.ExecuteCommandConsumerKafkaStub
	fake.recordInvocation("ExecuteCommandConsumerKafka", []interface{}{arg1})
	fake.executeCommandConsumerKafkaMutex.Unlock()
	if stub != nil {
		fake.ExecuteCommandConsumerKafkaStub(arg1)
	}
}

func (fake *FakeTaskExecutor) ExecuteCommandConsumerKafkaCallCount() int {
	fake.executeCommandConsumerKafkaMutex.RLock()
	defer fake.executeCommandConsumerKafkaMutex.RUnlock()
	return len(fake.executeCommandConsumerKafkaArgsForCall)
}

func (fake *FakeTaskExecutor) ExecuteCommandConsumerKafkaCalls(stub func(*sarama.ConsumerMessage)) {
	fake.executeCommandConsumerKafkaMutex.Lock()
	defer fake.executeCommandConsumerKafkaMutex.Unlock()
	fake.ExecuteCommandConsumerKafkaStub = stub
}

func (fake *FakeTaskExecutor) ExecuteCommandConsumerKafkaArgsForCall(i int) *sarama.ConsumerMessage {
	fake.executeCommandConsumerKafkaMutex.RLock()
	defer fake.executeCommandConsumerKafkaMutex.RUnlock()
	argsForCall := fake.executeCommandConsumerKafkaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskExecutor) SetUpSubscriber(arg1 context.Context) {
	fake.setUpSubscriberMutex.Lock()
	fake.setUpSubscriberArgsForCall = append(fake.setUpSubscriberArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.SetUpSubscriberStub
	fake.recordInvocation("SetUpSubscriber", []interface{}{arg1})
	fake.setUpSubscriberMutex.Unlock()
	if stub != nil {
		fake.SetUpSubscriberStub(arg1)
	}
}

func (fake *FakeTaskExecutor) SetUpSubscriberCallCount() int {
	fake.setUpSubscriberMutex.RLock()
	defer fake.setUpSubscriberMutex.RUnlock()
	return len(fake.setUpSubscriberArgsForCall)
}

func (fake *FakeTaskExecutor) SetUpSubscriberCalls(stub func(context.Context)) {
	fake.setUpSubscriberMutex.Lock()
	defer fake.setUpSubscriberMutex.Unlock()
	fake.SetUpSubscriberStub = stub
}

func (fake *FakeTaskExecutor) SetUpSubscriberArgsForCall(i int) context.Context {
	fake.setUpSubscriberMutex.RLock()
	defer fake.setUpSubscriberMutex.RUnlock()
	argsForCall := fake.setUpSubscriberArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskExecutor) Stop() {
	fake.stopMutex.Lock()
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct {
	}{})
	stub := fake.StopStub
	fake.recordInvocation("Stop", []interface{}{})
	fake.stopMutex.Unlock()
	if stub != nil {
		fake.StopStub()
	}
}

func (fake *FakeTaskExecutor) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *FakeTaskExecutor) StopCalls(stub func()) {
	fake.stopMutex.Lock()
	defer fake.stopMutex.Unlock()
	fake.StopStub = stub
}

func (fake *FakeTaskExecutor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.executeCommandConsumerKafkaMutex.RLock()
	defer fake.executeCommandConsumerKafkaMutex.RUnlock()
	fake.setUpSubscriberMutex.RLock()
	defer fake.setUpSubscriberMutex.RUnlock()
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTaskExecutor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ worker.TaskExecutor = new(FakeTaskExecutor)
