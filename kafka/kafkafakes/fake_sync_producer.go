// Code generated by counterfeiter. DO NOT EDIT.
package kafkafakes

import (
	"sync"

	"github.com/IBM/sarama"
	"github.com/ehsaniara/scheduler/kafka"
)

type FakeSyncProducer struct {
	SendMessageStub        func(*sarama.ProducerMessage) (int32, int64, error)
	sendMessageMutex       sync.RWMutex
	sendMessageArgsForCall []struct {
		arg1 *sarama.ProducerMessage
	}
	sendMessageReturns struct {
		result1 int32
		result2 int64
		result3 error
	}
	sendMessageReturnsOnCall map[int]struct {
		result1 int32
		result2 int64
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSyncProducer) SendMessage(arg1 *sarama.ProducerMessage) (int32, int64, error) {
	fake.sendMessageMutex.Lock()
	ret, specificReturn := fake.sendMessageReturnsOnCall[len(fake.sendMessageArgsForCall)]
	fake.sendMessageArgsForCall = append(fake.sendMessageArgsForCall, struct {
		arg1 *sarama.ProducerMessage
	}{arg1})
	stub := fake.SendMessageStub
	fakeReturns := fake.sendMessageReturns
	fake.recordInvocation("SendMessage", []interface{}{arg1})
	fake.sendMessageMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeSyncProducer) SendMessageCallCount() int {
	fake.sendMessageMutex.RLock()
	defer fake.sendMessageMutex.RUnlock()
	return len(fake.sendMessageArgsForCall)
}

func (fake *FakeSyncProducer) SendMessageCalls(stub func(*sarama.ProducerMessage) (int32, int64, error)) {
	fake.sendMessageMutex.Lock()
	defer fake.sendMessageMutex.Unlock()
	fake.SendMessageStub = stub
}

func (fake *FakeSyncProducer) SendMessageArgsForCall(i int) *sarama.ProducerMessage {
	fake.sendMessageMutex.RLock()
	defer fake.sendMessageMutex.RUnlock()
	argsForCall := fake.sendMessageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSyncProducer) SendMessageReturns(result1 int32, result2 int64, result3 error) {
	fake.sendMessageMutex.Lock()
	defer fake.sendMessageMutex.Unlock()
	fake.SendMessageStub = nil
	fake.sendMessageReturns = struct {
		result1 int32
		result2 int64
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSyncProducer) SendMessageReturnsOnCall(i int, result1 int32, result2 int64, result3 error) {
	fake.sendMessageMutex.Lock()
	defer fake.sendMessageMutex.Unlock()
	fake.SendMessageStub = nil
	if fake.sendMessageReturnsOnCall == nil {
		fake.sendMessageReturnsOnCall = make(map[int]struct {
			result1 int32
			result2 int64
			result3 error
		})
	}
	fake.sendMessageReturnsOnCall[i] = struct {
		result1 int32
		result2 int64
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSyncProducer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sendMessageMutex.RLock()
	defer fake.sendMessageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSyncProducer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kafka.SyncProducer = new(FakeSyncProducer)
