// Code generated by counterfeiter. DO NOT EDIT.
package corefakes

import (
	"context"
	"sync"

	"github.com/ehsaniara/delay-box/core"
	scheduler "github.com/ehsaniara/delay-box/proto"
)

type FakeScheduler struct {
	GetAllTasksPaginationStub        func(context.Context, int32, int32) []*scheduler.Task
	getAllTasksPaginationMutex       sync.RWMutex
	getAllTasksPaginationArgsForCall []struct {
		arg1 context.Context
		arg2 int32
		arg3 int32
	}
	getAllTasksPaginationReturns struct {
		result1 []*scheduler.Task
	}
	getAllTasksPaginationReturnsOnCall map[int]struct {
		result1 []*scheduler.Task
	}
	ScheduleStub        func(string, map[string]string) error
	scheduleMutex       sync.RWMutex
	scheduleArgsForCall []struct {
		arg1 string
		arg2 map[string]string
	}
	scheduleReturns struct {
		result1 error
	}
	scheduleReturnsOnCall map[int]struct {
		result1 error
	}
	SetUpSubscriberStub        func(context.Context)
	setUpSubscriberMutex       sync.RWMutex
	setUpSubscriberArgsForCall []struct {
		arg1 context.Context
	}
	StopStub        func()
	stopMutex       sync.RWMutex
	stopArgsForCall []struct {
	}
	SubscribeStub        func(context.Context)
	subscribeMutex       sync.RWMutex
	subscribeArgsForCall []struct {
		arg1 context.Context
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeScheduler) GetAllTasksPagination(arg1 context.Context, arg2 int32, arg3 int32) []*scheduler.Task {
	fake.getAllTasksPaginationMutex.Lock()
	ret, specificReturn := fake.getAllTasksPaginationReturnsOnCall[len(fake.getAllTasksPaginationArgsForCall)]
	fake.getAllTasksPaginationArgsForCall = append(fake.getAllTasksPaginationArgsForCall, struct {
		arg1 context.Context
		arg2 int32
		arg3 int32
	}{arg1, arg2, arg3})
	stub := fake.GetAllTasksPaginationStub
	fakeReturns := fake.getAllTasksPaginationReturns
	fake.recordInvocation("GetAllTasksPagination", []interface{}{arg1, arg2, arg3})
	fake.getAllTasksPaginationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeScheduler) GetAllTasksPaginationCallCount() int {
	fake.getAllTasksPaginationMutex.RLock()
	defer fake.getAllTasksPaginationMutex.RUnlock()
	return len(fake.getAllTasksPaginationArgsForCall)
}

func (fake *FakeScheduler) GetAllTasksPaginationCalls(stub func(context.Context, int32, int32) []*scheduler.Task) {
	fake.getAllTasksPaginationMutex.Lock()
	defer fake.getAllTasksPaginationMutex.Unlock()
	fake.GetAllTasksPaginationStub = stub
}

func (fake *FakeScheduler) GetAllTasksPaginationArgsForCall(i int) (context.Context, int32, int32) {
	fake.getAllTasksPaginationMutex.RLock()
	defer fake.getAllTasksPaginationMutex.RUnlock()
	argsForCall := fake.getAllTasksPaginationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeScheduler) GetAllTasksPaginationReturns(result1 []*scheduler.Task) {
	fake.getAllTasksPaginationMutex.Lock()
	defer fake.getAllTasksPaginationMutex.Unlock()
	fake.GetAllTasksPaginationStub = nil
	fake.getAllTasksPaginationReturns = struct {
		result1 []*scheduler.Task
	}{result1}
}

func (fake *FakeScheduler) GetAllTasksPaginationReturnsOnCall(i int, result1 []*scheduler.Task) {
	fake.getAllTasksPaginationMutex.Lock()
	defer fake.getAllTasksPaginationMutex.Unlock()
	fake.GetAllTasksPaginationStub = nil
	if fake.getAllTasksPaginationReturnsOnCall == nil {
		fake.getAllTasksPaginationReturnsOnCall = make(map[int]struct {
			result1 []*scheduler.Task
		})
	}
	fake.getAllTasksPaginationReturnsOnCall[i] = struct {
		result1 []*scheduler.Task
	}{result1}
}

func (fake *FakeScheduler) Schedule(arg1 string, arg2 map[string]string) error {
	fake.scheduleMutex.Lock()
	ret, specificReturn := fake.scheduleReturnsOnCall[len(fake.scheduleArgsForCall)]
	fake.scheduleArgsForCall = append(fake.scheduleArgsForCall, struct {
		arg1 string
		arg2 map[string]string
	}{arg1, arg2})
	stub := fake.ScheduleStub
	fakeReturns := fake.scheduleReturns
	fake.recordInvocation("Schedule", []interface{}{arg1, arg2})
	fake.scheduleMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeScheduler) ScheduleCallCount() int {
	fake.scheduleMutex.RLock()
	defer fake.scheduleMutex.RUnlock()
	return len(fake.scheduleArgsForCall)
}

func (fake *FakeScheduler) ScheduleCalls(stub func(string, map[string]string) error) {
	fake.scheduleMutex.Lock()
	defer fake.scheduleMutex.Unlock()
	fake.ScheduleStub = stub
}

func (fake *FakeScheduler) ScheduleArgsForCall(i int) (string, map[string]string) {
	fake.scheduleMutex.RLock()
	defer fake.scheduleMutex.RUnlock()
	argsForCall := fake.scheduleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeScheduler) ScheduleReturns(result1 error) {
	fake.scheduleMutex.Lock()
	defer fake.scheduleMutex.Unlock()
	fake.ScheduleStub = nil
	fake.scheduleReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScheduler) ScheduleReturnsOnCall(i int, result1 error) {
	fake.scheduleMutex.Lock()
	defer fake.scheduleMutex.Unlock()
	fake.ScheduleStub = nil
	if fake.scheduleReturnsOnCall == nil {
		fake.scheduleReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.scheduleReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeScheduler) SetUpSubscriber(arg1 context.Context) {
	fake.setUpSubscriberMutex.Lock()
	fake.setUpSubscriberArgsForCall = append(fake.setUpSubscriberArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.SetUpSubscriberStub
	fake.recordInvocation("SetUpSubscriber", []interface{}{arg1})
	fake.setUpSubscriberMutex.Unlock()
	if stub != nil {
		fake.SetUpSubscriberStub(arg1)
	}
}

func (fake *FakeScheduler) SetUpSubscriberCallCount() int {
	fake.setUpSubscriberMutex.RLock()
	defer fake.setUpSubscriberMutex.RUnlock()
	return len(fake.setUpSubscriberArgsForCall)
}

func (fake *FakeScheduler) SetUpSubscriberCalls(stub func(context.Context)) {
	fake.setUpSubscriberMutex.Lock()
	defer fake.setUpSubscriberMutex.Unlock()
	fake.SetUpSubscriberStub = stub
}

func (fake *FakeScheduler) SetUpSubscriberArgsForCall(i int) context.Context {
	fake.setUpSubscriberMutex.RLock()
	defer fake.setUpSubscriberMutex.RUnlock()
	argsForCall := fake.setUpSubscriberArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeScheduler) Stop() {
	fake.stopMutex.Lock()
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct {
	}{})
	stub := fake.StopStub
	fake.recordInvocation("Stop", []interface{}{})
	fake.stopMutex.Unlock()
	if stub != nil {
		fake.StopStub()
	}
}

func (fake *FakeScheduler) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *FakeScheduler) StopCalls(stub func()) {
	fake.stopMutex.Lock()
	defer fake.stopMutex.Unlock()
	fake.StopStub = stub
}

func (fake *FakeScheduler) Subscribe(arg1 context.Context) {
	fake.subscribeMutex.Lock()
	fake.subscribeArgsForCall = append(fake.subscribeArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.SubscribeStub
	fake.recordInvocation("Subscribe", []interface{}{arg1})
	fake.subscribeMutex.Unlock()
	if stub != nil {
		fake.SubscribeStub(arg1)
	}
}

func (fake *FakeScheduler) SubscribeCallCount() int {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	return len(fake.subscribeArgsForCall)
}

func (fake *FakeScheduler) SubscribeCalls(stub func(context.Context)) {
	fake.subscribeMutex.Lock()
	defer fake.subscribeMutex.Unlock()
	fake.SubscribeStub = stub
}

func (fake *FakeScheduler) SubscribeArgsForCall(i int) context.Context {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	argsForCall := fake.subscribeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeScheduler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAllTasksPaginationMutex.RLock()
	defer fake.getAllTasksPaginationMutex.RUnlock()
	fake.scheduleMutex.RLock()
	defer fake.scheduleMutex.RUnlock()
	fake.setUpSubscriberMutex.RLock()
	defer fake.setUpSubscriberMutex.RUnlock()
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeScheduler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ core.Scheduler = new(FakeScheduler)
